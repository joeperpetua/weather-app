openapi: 3.0.2
info:
  title: "WeatherAPI"
  version: "1.0.0"
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000

tags:
  - name: Cities
    description: Endpoints related to cities and countries.
  - name: Forecast
    description: Endpoints for retrieving weather forecasts.
  - name: Historical
    description: Endpoints for historical weather data.
  - name: Admin
    description: Administrative endpoints for managing cities.

paths:
  /cities:
    get:
      operationId: endpoints.city.get_cities
      summary: Get cities.
      description: Returns a list of cities.
      tags: 
        - Cities
      parameters:
        - in: query
          name: city
          schema:
            type: string
          description: String to filter results.
          required: false
          allowEmptyValue: true
      responses:
        200:
          description: A list of cities.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CityReturn"
        4XX:
          $ref: "#/components/responses/ErrorResponse"
        5XX:
          $ref: "#/components/responses/ErrorResponse"

  /forecast/{cityId}/daily:
    get:
      operationId: endpoints.weather.get_forecast_daily
      summary: Get city daily forecasts.
      description: Get daily forecast for a city over a given ammount of days.
      tags: 
        - Forecast
      parameters:
        - $ref: "#/components/parameters/cityIdParam"
        - $ref: "#/components/parameters/daysParam"
        - $ref: "#/components/parameters/unitsParam"
      responses:
        200:
          description: A list of forecasted days.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForecastDaily"
        4XX:
          $ref: "#/components/responses/ErrorResponse"
        5XX:
          $ref: "#/components/responses/ErrorResponse"

  /forecast/{cityId}/hourly:
    get:
      operationId: endpoints.weather.get_forecast_hourly
      summary: Get city hourly forecasts.
      description: Get hourly forecast for a city over a given ammount of days.
      tags: 
        - Forecast
      parameters:
        - $ref: "#/components/parameters/cityIdParam"
        - $ref: "#/components/parameters/daysParam"
        - $ref: "#/components/parameters/unitsParam"
        
      responses:
        200:
          description: A list of forecasted hours.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForecastHourly"
        4XX:
          $ref: "#/components/responses/ErrorResponse"
        5XX:
          $ref: "#/components/responses/ErrorResponse"

  /historical/{cityId}:
    get:
      operationId: endpoints.weather.get_historical
      summary: Get city historical data.
      description: Get historical weather data for a city over a given date range in a hourly fashion.
      tags: 
        - Historical
      parameters:
        - $ref: "#/components/parameters/cityIdParam"
        - in: query
          name: from
          description: Date from which to get historical data. ISO8601 format.
          schema:
            type: string
            format: date
          required: true
        - in: query
          name: to
          description: Date to which to get historical data. ISO8601 format.
          schema:
            type: string
            format: date
          required: true
      responses:
        200:
          description: A list of historical weather data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HistoricalHourly"
        4XX:
          $ref: "#/components/responses/ErrorResponse"
        5XX:
          $ref: "#/components/responses/ErrorResponse"

  /admin/login:
    post:
      operationId: endpoints.admin.login
      summary: Login.
      description: Login to the admin panel. Authentication through HTTP Basic Auth ().
      security:
        - basic: []
      tags: 
        - Admin
      parameters:
        - $ref: "#/components/parameters/basicAuthHeader"
      responses:
        200:
          description: Login successful.
          content:
            application/json:
              schema:
                description: JWT token to use for authentication. Decoded payload contains iss, sub, exp and iat claims. Validity is 1 hour.
                example:
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJteV9hZG1pbiIsImV4cCI6MTc0MzcyMjg4NH0.B6SCMTvDQOL1w6uJN5vNC-ghGnqVSwsOINbkuHQ-eIs"
                type: object
                properties:
                  token:
                    type: string
        4XX:
          $ref: "#/components/responses/ErrorResponse"
        5XX:
          $ref: "#/components/responses/ErrorResponse"

  /cities/add:
    post:
      operationId: endpoints.city.post_city_add
      summary: Add city.
      description: Add a new city to the database. Authentication through HTTP Bearer token (JWT).
      security:
        - jwt: ['secret']
      tags: 
        - Admin
      parameters:
        - $ref: "#/components/parameters/bearerAuthHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CityRequest"
      responses:
        200:
          description: City added successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CityReturn"
        4XX:
          $ref: "#/components/responses/ErrorResponse"
        5XX:
          $ref: "#/components/responses/ErrorResponse"
  
  /city/{cityId}/edit:
    put:
      operationId: endpoints.city.put_city_edit
      summary: Edit city.
      description: Edit a city in the database. Whole object will be overwritten with the provided data.
      security:
        - jwt: ['secret']
      tags: 
        - Admin
      parameters:
        - $ref: "#/components/parameters/cityIdParam"
        - $ref: "#/components/parameters/bearerAuthHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CityRequest"
      responses:
        200:
          description: City edited successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CityReturn"
        4XX:
          $ref: "#/components/responses/ErrorResponse"
        5XX:
          $ref: "#/components/responses/ErrorResponse"

  /city/{cityId}/delete:
    delete:
      operationId: endpoints.city.delete_city
      summary: Delete city.
      description: Delete a city from the database.
      security:
        - jwt: ['secret']
      tags: 
        - Admin
      parameters:
        - $ref: "#/components/parameters/cityIdParam"
        - $ref: "#/components/parameters/bearerAuthHeader"
      responses:
        200:
          description: City deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
                    example: "City deleted successfully."
        4XX:
          $ref: "#/components/responses/ErrorResponse"
        5XX:
          $ref: "#/components/responses/ErrorResponse"


      
components:
  securitySchemes:
    basic:
      type: http
      scheme: basic
      x-basicInfoFunc: security.basic_auth
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: security.decode_jwt
  parameters:
    cityIdParam:
      in: path
      name: cityId
      schema:
        type: integer
      description: City ID to get data for.
      required: true

    daysParam:
      in: query
      name: days
      description: Number of days to forecast. Specify 1 for current day.
      schema:
        type: integer
        minimum: 1
        maximum: 7
      required: true

    unitsParam:
      in: query
      name: units
      description: Units to use for the returned data.
      schema:
        type: string
        enum: [metric, imperial]
      required: true

    basicAuthHeader:
      in: header
      name: Authorization
      required: true
      description: |
        HTTP Basic Auth header. 
        
        Format: Basic <base64-encoded username:password>
      example: Basic bXlfdXNlcm5hbWU6bXlfcGFzc3dvcmQ=
      schema:
        type: string

    bearerAuthHeader:
      in: header
      name: Authorization
      required: true
      description: |
        HTTP Bearer Auth header. 
        
        Format: Bearer <jwt-token>
      example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJqb2VwZXJwZXR1YS53ZWF0aGVyYXBwLmNvbSIsInN1YiI6Im15X3VzZXJuYW1lIiwiZXhwIjoxNzQzODA1OTUzLCJpYXQiOjE3NDM4MDIzNTN9.C_CxFvzTOcfGx2BurjL5GmOl9r1Az4ioAK_KSuVSEjQ=
      schema:
        type: string

  responses:
    ErrorResponse:
      description: Generic response for errors returned by the API.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    Error:
      type: object
      description: Generic error schema.
      required: ["type", "title", "detail", "status"]
      example: {
        "type": "about:blank",
        "title": "Bad Request",
        "detail": "'password' is a required property",
        "status": 400
      }
      properties:
        type:
          type: string
          description: Error type. Default is "about:blank".
        title:
          type: string
          description: Short description of the error.
        detail:
          type: string
          description: Detailed description of the error.
        status:
          type: integer
          description: HTTP status code.
  
    CityRequest:
      type: object
      description: City information present in a request object.
      required:
        - cityName
        - country
        - countryCode
        - coordinates
        - timezone
        - adminZone1
        - adminZone2
      example:
        cityName: "Vienna"
        country: "Austria"
        countryCode: "AT"
        coordinates: { lat: 48.210033, lon: 16.363449 }
        timezone: "Europe/Vienna"
        adminZone1: "Vienna"
        adminZone2: ""
      properties:
        cityName:
          type: string
          description: City name.
        country:
          type: string
          description: Country name.
        countryCode:
          type: string
          description: Country code.
        coordinates:
          type: object
          required: ["lat", "lon"]
          properties:
            lat:
              type: number
              description: Latitude.
            lon:
              type: number
              description: Longitude.
        timezone:
          type: string
          description: City timezone.
        adminZone1:
          type: string
          description: Main administration zone, usually a province, state or region.
        adminZone2:
          type: string
          description: Secondary administration zone.

    CityReturn:
      type: object
      description: City information present in a return object. The only difference with the CityRequest schema is the addition of the city ID.
      required:
        - id
        - cityName
        - country
        - countryCode
        - coordinates
        - timezone
        - adminZone1
        - adminZone2
      example:
        id: 23
        cityName: "Vienna"
        country: "Austria"
        countryCode: "AT"
        coordinates: { lat: 48.210033, lon: 16.363449 }
        timezone: "Europe/Vienna"
        adminZone1: "Vienna"
        adminZone2: ""
      properties:
        id:
          type: integer
          description: City ID.
        cityName:
          type: string
          description: City name.
        country:
          type: string
          description: Country name.
        countryCode:
          type: string
          description: Country code.
        coordinates:
          type: object
          required: ["lat", "lon"]
          properties:
            lat:
              type: number
              description: Latitude.
            lon:
              type: number
              description: Longitude.
        timezone:
          type: string
          description: City timezone.
        adminZone1:
          type: string
          description: Main administration zone, usually a province, state or region.
        adminZone2:
          type: string
          description: Secondary administration zone.
    
    ForecastDaily:
      type: object
      description: A weather forecast containing daily weather data.
      required:
        - day
        - weatherCode
        - temperatureMin
        - temperatureMax
        - precipitationChance
        - uvIndex
        - windSpeed
        - windDirection
        - relativeHumidity
      example:
        date: ["2023-01-01", "2023-01-02", "2023-01-03"]
        weatherCode: [0, 3, 3]
        temperatureMin: [10, 20, 30]
        temperatureMax: [20, 30, 40]
        precipitationChance: [10, 20, 30]
        uvIndex: [10, 20, 30]
        windSpeed: [10, 20, 30]
        windDirection: [10, 20, 30]
        relativeHumidity: [10, 20, 30]
      properties:
        day:
          description: List of forecast dates. ISO8601 format.
          type: array
          items:
            type: string
            format: date
        weatherCode:
          type: array
          description: Weather interpretation codes for each day.
          items:
            type: integer
            minimum: 0
            maximum: 99
        temperatureMin:
          type: array
          description: Minimum temperature for each day.
          items:
            type: number
            minimum: -80
            maximum: 140
        temperatureMax:
          type: array
          description: Maximum temperature for each day.
          items:
            type: number
            minimum: -80
            maximum: 140
        precipitationChance:
          type: array
          description: Median chance of precipitation for each day (percentage).
          items:
            type: number
            minimum: 0
            maximum: 100
        uvIndex:
          type: array
          description: UV index for each day.
          items:
            type: number
            minimum: 0
            maximum: 999
        windSpeed:
          type: array
          description: Wind speed for each day.
          items:
            type: number
            minimum: 0
            maximum: 999
        windDirection:
          type: array
          description: Wind direction for each day.
          items:
            type: number
            minimum: 0
            maximum: 360
        relativeHumidity:
          type: array
          description: Relative humidity for each day.
          items:
            type: number
            minimum: 0
            maximum: 100

    ForecastHourly:
      type: object
      description: A weather forecast containing hourly weather data.
      required:
        - date
        - weatherCode
        - temperature
        - apparentTemperature
        - relativeHumidity
        - precipitationChance
        - precipitation
        - windSpeed
        - windDirection
        - windGust
        - uvIndex
        - aqi
      example:
        date: [
          "2025-04-10T00:00",
          "2025-04-10T01:00",
          "2025-04-10T02:00",
          "2025-04-10T03:00",
          "2025-04-10T04:00",
          "2025-04-10T05:00",
          "2025-04-10T06:00",
          "2025-04-10T07:00",
          "2025-04-10T08:00",
          "2025-04-10T09:00",
          "2025-04-10T10:00",
          "2025-04-10T11:00",
          "2025-04-10T12:00",
          "2025-04-10T13:00",
          "2025-04-10T14:00",
          "2025-04-10T15:00",
          "2025-04-10T16:00",
          "2025-04-10T17:00",
          "2025-04-10T18:00",
          "2025-04-10T19:00",
          "2025-04-10T20:00",
          "2025-04-10T21:00",
          "2025-04-10T22:00",
          "2025-04-10T23:00"
        ]
        weatherCode: [1, 0, 3, 2, 0, 1, 1, 2, 3, 0, 2, 1, 3, 3, 0, 2, 1, 0, 2, 3, 1, 0, 2, 3]
        temperature: [10, 7, 14, 5, 11, 9, 6, 13, 8, 12, 5, 10, 7, 14, 6, 9, 11, 13, 8, 5, 12, 10, 7, 14]
        apparentTemperature: [10, 7, 14, 5, 11, 9, 6, 13, 8, 12, 5, 10, 7, 14, 6, 9, 11, 13, 8, 5, 12, 10, 7, 14]
        relativeHumidity: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        precipitationProbability: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 25, 22, 8, 10, 5, 0, 0, 0, 0, 0]
        precipitation: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]
        windSpeed: [5, 7, 9, 12, 14, 15, 16, 18, 20, 22, 23, 24, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 46]
        windDirection: [45, 90, 135, 180, 225, 270, 315, 360, 45, 90, 135, 180, 225, 270, 315, 360, 45, 90, 135, 180, 225, 270, 315, 360]
        windGust: [5, 7, 9, 12, 14, 15, 16, 18, 20, 22, 23, 24, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 46]
        uvIndex: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7]
        aqi: [30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145]
      properties:
        date:
          description: Date and hour for each forecast. ISO8601 format.
          type: array
          items:
            type: string
            format: date-time
        weatherCode:
          type: array
          description: Weather interpretation codes for each hour.
          items:
            type: integer
            minimum: 0
            maximum: 99
        temperature:
          type: array
          description: Temperature for each hour. 
          items:
            type: number
            minimum: -80
            maximum: 140
        apparentTemperature:
          type: array
          description: Apparent temperature for each hour.
          items:
            type: number
            minimum: -80
            maximum: 140
        relativeHumidity:
          type: array
          description: Relative humidity for each hour (percentage).
          items:
            type: number
            minimum: 0
            maximum: 100
        precipitationProbability:
          type: array
          description: Max probability of precipitation for each hour (percentage).
          items:
            type: number
            minimum: 0
            maximum: 100
        precipitation:
          type: array
          description: Precipitation for each hour.
          items:
            type: number
            minimum: 0
            maximum: 999
        windSpeed:
          type: array
          description: Wind speed for each hour.
          items:
            type: number
            minimum: 0
            maximum: 999
        windDirection:
          type: array
          description: Wind direction for each hour.
          items:
            type: number
            minimum: 0
            maximum: 360
        windGust:
          type: array
          description: Wind gust for each hour.
          items:
            type: number
            minimum: 0
            maximum: 999
        uvIndex:
          type: array
          description: UV index for each hour.
          items:
            type: number
            minimum: 0
            maximum: 999
        aqi:
          type: array
          description: Air quality index for each hour.
          items:
            type: number
            minimum: 0
            maximum: 999

    HistoricalHourly:
      type: object
      description: A weather forecast containing hourly weather data.
      required:
        - hour
        - weatherCode
        - temperature
        - precipitation
      example:
        hour: [
          "2025-04-03T00:00",
          "2025-04-03T01:00",
          "2025-04-03T02:00",
          "2025-04-03T03:00",
          "2025-04-03T04:00",
          "2025-04-03T05:00",
          "2025-04-03T06:00",
          "2025-04-03T07:00",
          "2025-04-03T08:00",
          "2025-04-03T09:00",
          "2025-04-03T10:00",
          "2025-04-03T11:00",
          "2025-04-03T12:00",
          "2025-04-03T13:00",
          "2025-04-03T14:00",
          "2025-04-03T15:00",
          "2025-04-03T16:00",
          "2025-04-03T17:00",
          "2025-04-03T18:00",
          "2025-04-03T19:00",
          "2025-04-03T20:00",
          "2025-04-03T21:00",
          "2025-04-03T22:00",
          "2025-04-03T23:00"
        ]
        weather_code: [1, 0, 3, 2, 0, 1, 1, 2, 3, 0, 2, 1, 3, 3, 0, 2, 1, 0, 2, 3, 1, 0, 2, 3]
        temperature: [10, 7, 14, 5, 11, 9, 6, 13, 8, 12, 5, 10, 7, 14, 6, 9, 11, 13, 8, 5, 12, 10, 7, 14]
        precipitation: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      properties:
        hour:
          description: Date and hour for each forecast. ISO8601 format.
          type: array
          items:
            type: string
            format: date-time
        weatherCode:
          type: array
          description: Weather interpretation codes for each hour.
          items:
            type: integer
            minimum: 0
            maximum: 99
        temperature:
          type: array
          description: Temperature for each hour. 
          items:
            type: number
            minimum: -80
            maximum: 140
        precipitation:
          type: array
          description: Total precipitation for each hour.
          items:
            type: number
            minimum: 0
            maximum: 100